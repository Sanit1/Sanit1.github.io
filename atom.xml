<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>土狼的代码窝</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://sanit1.github.io/"/>
  <updated>2017-07-29T18:19:03.570Z</updated>
  <id>https://sanit1.github.io/</id>
  
  <author>
    <name>Sanit</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>登录那些事——SESSION COOKIE到TOKEN</title>
    <link href="https://sanit1.github.io/2017/07/18/%E7%99%BB%E5%BD%95%E6%B3%A8%E5%86%8C%E9%82%A3%E4%BA%9B%E4%BA%8B/"/>
    <id>https://sanit1.github.io/2017/07/18/登录注册那些事/</id>
    <published>2017-07-18T12:07:43.000Z</published>
    <updated>2017-07-29T18:19:03.570Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>好久没写过文章了，感觉自己这段时间在虚度，刚好自己在重构登录注册，就来写一篇吧，我记得当年刚入行的时候就有人问我cookie与session的区别，实际工作中，很多小公司的程序员也只关注增删改查，对于一些很基础的东西反而都没好好掌握。</p>
</blockquote>
<a id="more"></a>
<hr>
<h3 id="最原始的登录实现"><a href="#最原始的登录实现" class="headerlink" title="最原始的登录实现"></a>最原始的登录实现</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="comment">//验证传过来的账号密码是否跟数据库里面的用户对的上</span></div><div class="line">    <span class="keyword">if</span>(账号密码通过验证)&#123;</div><div class="line">    	session_start();</div><div class="line">        $_SESSION[<span class="string">'xxx+uid'</span>] = <span class="string">'用户信息'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这时候我们来访问下页面，这时候我们发现页面上竟然带上了cookie<br><img src="http://ofnct0qsm.bkt.clouddn.com/nocookie.png" alt=""><br>这是为什么呢，因为php在我们使用SESSION的时候就会默认给我带上PHPSESSID的cookie给浏览器。</p>
<p>然后一些新手程序员怎么弄自动登录呢，就简单的这样写</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">autoLogin</span><span class="params">()</span></span>&#123;</div><div class="line">	session_start();</div><div class="line">    $userInfo = $_SESSION[<span class="string">'xxx+uid'</span>];</div><div class="line">    <span class="keyword">if</span>(!<span class="keyword">empty</span>($userInfo)) &#123;</div><div class="line">    	<span class="comment">//获取用户信息成功，自动登录执行其它业务逻辑</span></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">    	<span class="comment">//获取用户信息失败，跳转到登录页面</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>虽然说这样使用貌似没什么问题，所以很多新人就搞不懂session与cookie的区别，回答的支支吾吾的。但是，我们看上面cookie的生命周期，我们发现在浏览器关闭的时候，这个cookie就失效了，所以有些人就这么坑爹的搞，貌似在他看来就是这么自动登录的，其实他们完全没理解这套机制。那么最简单的改法就是只要我们把这个cookie的生命周期弄长，让它在浏览器关闭的时候，下次打开浏览器也能活着。php自带的<a href="http://php.net/manual/en/function.session-start.php" target="_blank" rel="external">session_start</a>这个方法它支持我们传一个‘cookie_lifetime’的值进去(你要设置cookie的过期时间，比如要设置到明天这个时间点，那就是当前的时间戳+一天的秒数)。这样设置以后，一个最简单的保持登录功能就完成了。</p>
<p>当然，我们也可以不用php自带的PHPSESSID,我们可以自定义sessionId。当然，php也很方便的为我们封装了方法</p>
<p>做法是这样的</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="comment">//验证传过来的账号密码是否跟数据库里面的用户对的上</span></div><div class="line">    <span class="keyword">if</span>(账号密码通过验证)&#123;</div><div class="line">    	$sessionId = <span class="string">'xxx+uid'</span>;</div><div class="line">        session_id($sessionId);</div><div class="line">    	session_start();</div><div class="line">        $_SESSION[$sessionId] = <span class="string">'用户信息'</span>;</div><div class="line">        <span class="comment">//把sessionId用cookie传给浏览器，并设置它的生命周期</span></div><div class="line">        setcookie(<span class="string">'userSessionId'</span>, $sessionId, <span class="string">'过期时间'</span>, ‘cookie的路径’, ‘cookie的作用域’, ‘是否仅通过安全的 HTTPS 连接’, ‘仅通过HTTP 连接’);<span class="comment">//具体的参数大家可以参考php.net上面的介绍</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">autoLogin</span><span class="params">()</span></span>&#123;</div><div class="line">	$sessionId = $_COOKIE[<span class="string">'userSessionId'</span>];<span class="comment">//你刚才设置的cookie的name</span></div><div class="line">    session_id($sessionId);</div><div class="line">    session_start();</div><div class="line">    $userInfo = $_SESSION[$sessionId];</div><div class="line">    <span class="keyword">if</span>(!<span class="keyword">empty</span>($userInfo)) &#123;</div><div class="line">    	<span class="comment">//获取用户信息成功，自动登录执行其它业务逻辑</span></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">    	<span class="comment">//获取用户信息失败，跳转到登录页面</span></div><div class="line">    &#125;    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>所以那些百度上的答案，seesion存在服务端，cookie存浏览器，你说它错吗，它也没错，但是它没把本质讲清楚，session就是依赖cookie这样使用的，这也是web界非常经典的使用方式。</p>
<p>上述例子中我没说明session的过期时间，session在服务端它也有自己的一个过期时间的，我们可以再php.ini里面修改session.gc_maxlifetime这个值来改变session的过期时间。具体关于session的回收机制不是本文的重点，可以自行百度，有很多详细的答案。</p>
<hr>
<h3 id="稍微演变后的登录"><a href="#稍微演变后的登录" class="headerlink" title="稍微演变后的登录"></a>稍微演变后的登录</h3><p>可以看到我们上面的登录，并且保持登录方式确实简单有效，但是随着业务的不断发展，很多公司服务器都是分布式负载一个项目，那么这个就会导致一个问题，默认的session是存文件的，你要多台服务器共享磁盘吗，显然很低效，那么这么多台服务器怎么共享session呢？当然session是支持其它的存储方式的，比如像想在用到的非常多的memcache、redis这种高速的内存数据库。那我们只要多台服务器用一个redis或一个redis集群，那么就实现session共享了。那为什么大费周章的用session,我们自己也可以凭借这种内存型数据库构造一种类似session的机制，直接去掉session。这时候就有一种登录的方式演变出来了，我用redis memche这种key value的数据库直接存用户信息，然后cookie里面直接存一个自己按一定规则生成的用户标识，不也能实现登录+保持登录吗？或者可以再扩大一点，前端/客户端传一个凭证过来，然后我们通过自己存储的一套机制来验证，这样就完全可以替代原本的cookie/session 而且更易跨平台跟自己维护，确实是这样的。</p>
<p>这里我用redis作为例子</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span>(账号密码通过验证)&#123;</div><div class="line">        $userKey = <span class="string">'user_id:xxx'</span>;</div><div class="line">        $redisClient = <span class="keyword">new</span> RedisClient();</div><div class="line">        $expireTime = <span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>;<span class="comment">//缓存的过期时间</span></div><div class="line">        $redisClient-&gt;set($userKey,<span class="string">'用户信息xxx'</span>,$expireTime);</div><div class="line">        $userKeyEncrypt = openssl_encrypt($userKey,<span class="string">'aes-128-cbc'</span>,<span class="string">'password'</span>);</div><div class="line">        <span class="comment">//再把这个userKeyEncrypt传给前端，作为下次保持登录的标识</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">autoLogin</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="comment">//假设已经获取到前端传过来的值为 35R4XMHmMKI04R9PDuJ4Tg==</span></div><div class="line">    $userKeyEncrypt = <span class="string">'35R4XMHmMKI04R9PDuJ4Tg=='</span>;</div><div class="line">    $userKey = openssl_decrypt($userKeyEncrypt,<span class="string">'aes-128-cbc'</span>,<span class="string">'password'</span>);</div><div class="line">    $redisClient = <span class="keyword">new</span> RedisClient();</div><div class="line">    <span class="comment">//获取缓存中的用户信息</span></div><div class="line">    $userInfo = $redisClient-&gt;get($userKey);</div><div class="line">    <span class="keyword">if</span>(!<span class="keyword">empty</span>($userInfo)) &#123;</div><div class="line">    	<span class="comment">//获取用户信息成功，自动登录执行其它业务逻辑</span></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">    	<span class="comment">//获取用户信息失败，跳转到登录页面</span></div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>说明，因为自己这边本地用的是php7.1,它移除了我以前加解密用的比较多的mcrypt_encryp方法，所以就用openssl的加解密方法来代替，上述login代码会有waring,所以可以自行写加解密的方法，我这里只是为了方便使用，下图列出了我登录后redis缓存里面的信息</p>
<p><img src="http://ofnct0qsm.bkt.clouddn.com/redis2.png" alt="redis信息"></p>
<p>然后我们再调用自动登录方法，确实也能获取到用户的信息。可以自己去试一下，我这里只是把中心思想的实现写出来了。<br>当然你也可以不用redis 你也可以用其他的存储介质，这个as you like.<br>所以可见我们这种登录方式也是可行的，至于这个凭证怎么发给前端，可以用cookie 可以直接返回字符串给前端。当然我们取的时候也要根据自己设置的去取。</p>
<hr>
<h3 id="新时代的JWT-json-web-token"><a href="#新时代的JWT-json-web-token" class="headerlink" title="新时代的JWT(json web token)"></a>新时代的JWT(json web token)</h3>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;好久没写过文章了，感觉自己这段时间在虚度，刚好自己在重构登录注册，就来写一篇吧，我记得当年刚入行的时候就有人问我cookie与session的区别，实际工作中，很多小公司的程序员也只关注增删改查，对于一些很基础的东西反而都没好好掌握。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Composer的使用</title>
    <link href="https://sanit1.github.io/2017/03/22/Composer%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://sanit1.github.io/2017/03/22/Composer的使用/</id>
    <published>2017-03-22T07:58:00.000Z</published>
    <updated>2017-07-18T15:40:13.727Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>有段时间没更新博客了，自己最近也很忙。今年年初换了一份新工作，我不知道自己是不是成功的跳槽，这段时间很迷茫。好久没更新博客了，这篇文章也写的断断续续的。基本上自己也熟练掌握composer了，就相当于给自己的巩固，就写一篇出来</p>
</blockquote>
<a id="more"></a>
<hr>
<h3 id="什么是Composer"><a href="#什么是Composer" class="headerlink" title="什么是Composer"></a>什么是Composer</h3><p>　　Composer就是PHP的一种包管理工具,你可以当做就像前端js的npm,或者像ruby的gem.它的主要功能就是用来管理第三方包。我记得以前php也有一个包管理工具的，具体名字忘了，但是有诟病，没有像composer那么好用，所以现在新出来的框架都是composer的。</p>
<hr>
<h3 id="Composer的安装"><a href="#Composer的安装" class="headerlink" title="Composer的安装"></a>Composer的安装</h3><p>　　composer的安装非常简单，去composer官网(<a href="https://getcomposer.org)。" target="_blank" rel="external">https://getcomposer.org)。</a> Windows的用户可以直接下载.exe进行安装，但是必须自己已经安装好了php并且把php加到了环境变量，然后composer也是需要你的php开启一些基本的扩展，比如curl，fileinfo，openssl 我记得就这些了。当然如果你嫌弃安装麻烦的话，可以直接载composer.phar直接就行了。官方命名成.phar就把这个当作就是一个可执行的程序，其实composer的功能都是写在这个文件里面了。linux用户按照官网的安装命令安装，或者直接下载composer.phar也是可以的。如果出现了问题，要不就是你php没有加到环境变量，或者你php的一些基本扩展没开，不然不可能有问题。</p>
<hr>
<h3 id="Composer的原理"><a href="#Composer的原理" class="headerlink" title="Composer的原理"></a>Composer的原理</h3><p>　　其实composer的原理还是很简单的。比如你用composer装一个第三方包的时候，要不你指定代码的git源地址，或者你指定一个包名。如果你输入的是包名，那么它就会搜<a href="https://packagist.org" target="_blank" rel="external">https://packagist.org</a> 上面的包名;如果你指定repositories,然后它也会去你指定的地方载那个包。</p>
<hr>
<h3 id="Composer的使用"><a href="#Composer的使用" class="headerlink" title="Composer的使用"></a>Composer的使用</h3><p>　　composer只要装好了，使用的话很简单。比如我感觉Laravel的ORM很好用，而且我也在packagist找到了它的包。然后我执行 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">composer require illuminate/database</div></pre></td></tr></table></figure>
<p>这个命令。然后就能看到下图</p>
<p><img src="http://ofnct0qsm.bkt.clouddn.com/composer_anzhuang.png" alt="composer安装包"><br>当然，你也可以配置好composer.json文件之后，直接执行composer install.执行完毕后，composer除了帮我们把别人的包的代码下载下来，也会帮你完成自动加载，我们可以看到在vendor目录下面多了一个<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">autoload.php</div></pre></td></tr></table></figure></p>
<p>只要我们在其它地方要用到包里面的代码，只要</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">require&apos;/vendor/autoload.php&apos;;</div></pre></td></tr></table></figure>
<p>就可以了。</p>
<ul>
<li><b>composer.lock的作用</b></li>
</ul>
<p>有了composer.json为什么还要生成composer.lock呢，composer的作者不是多此一举，很多时候很多包都有小版本来一直维护升级，修复bug，所以就算我们用了laravel 5.4,但是随着时间的推移，它也会渐渐的从5.4.1到5.4.xx,所以一般我们在安装composer包的时候，一般我们都是只指定了一个版本，对于里面的小版本我们一般都是.*。这时候，composer.lock的作用就体现出来了，它记录的是我们这边这次composer装的到底是哪个小版本，把具体的信息都记录下来了，所以作者以.lock结尾还是很有道理的。</p>
<ul>
<li><b>composer install; composer require; composer update的区别以及用法</b></li>
</ul>
<p>很多刚接触composer的新用户可能感觉这三个命令区别不大，反正都可以用。确实，一开始我也没感觉，直到有一天我要安装个新包，然后很纠结要不要把composer.json 以及composer.lock传到版本库里面去，其实是应该要的。有时候我们会遇到这样的问题，就是我们本地的代码跟线上的代码都装了同一个包，但是因为小版本的不同导致线上代码出bug。我先来说说用的最多的composer require</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">composer require &quot;包名:版本号&quot;</div></pre></td></tr></table></figure>
<p>这是他的用法，如果我在本地开发的时候安装了一个composer包，大半个月后，要上线(一般vendor目录的第三方包都没有在代码版本库里面的)。然后我们再在线上执行跟我们当时一样的命令，可能线上的包跟线下的包代码有所不同。虽然基本上没什么大问题，但是有时候遇到了能让你很蛋疼。</p>
<p> composer install的用法</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">composer install</div></pre></td></tr></table></figure>
<p>执行这样的命令就可以了，前提是你的配置好composer.json跟composer.lock。它只会根据你lock里面的信息来安装。</p>
<p> composer update的用法</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">composer update</div></pre></td></tr></table></figure>
<p>执行这样的命令就可以直接更新了，它不依赖与composer.lock，它会把你composer.json里面的带.*的包全部都更新到最新的版本。所以基本上这个命令我不推荐使用。</p>
<p> 综上所述，一般来说如果你使用了第三方composer包，并且想要顺利上线的话，我这边推荐这么做。</p>
<p> <em>1. 本地执行composer require “包名:版本号”</em></p>
<p> <em>2. 把本地的composer.json跟composer.lock传到线上版本</em></p>
<p> <em>3. 再在线上执行composer install</em></p>
<hr>
<h3 id="制作一个自己的composer包"><a href="#制作一个自己的composer包" class="headerlink" title="制作一个自己的composer包"></a>制作一个自己的composer包</h3><hr>
<h3 id="搭建自己的composer仓库"><a href="#搭建自己的composer仓库" class="headerlink" title="搭建自己的composer仓库"></a>搭建自己的composer仓库</h3>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;有段时间没更新博客了，自己最近也很忙。今年年初换了一份新工作，我不知道自己是不是成功的跳槽，这段时间很迷茫。好久没更新博客了，这篇文章也写的断断续续的。基本上自己也熟练掌握composer了，就相当于给自己的巩固，就写一篇出来&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="composer" scheme="https://sanit1.github.io/tags/composer/"/>
    
  </entry>
  
  <entry>
    <title>2016年总结，以及对于未来的展望</title>
    <link href="https://sanit1.github.io/2017/02/12/2016%E5%B9%B4%E6%80%BB%E7%BB%93%EF%BC%8C%E4%BB%A5%E5%8F%8A%E5%AF%B9%E4%BA%8E%E6%9C%AA%E6%9D%A5%E7%9A%84%E5%B1%95%E6%9C%9B/"/>
    <id>https://sanit1.github.io/2017/02/12/2016年总结，以及对于未来的展望/</id>
    <published>2017-02-12T08:25:17.000Z</published>
    <updated>2017-04-04T05:44:01.115Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>转眼16年就过去了，过年也比较早，1月份就是春节了。去年9月10月的时候感觉时间过的好慢，而后又感觉自己玩了两月，怎么那么快就过完年了。元宵也过了，传统意义上的年已经过完了，是时候开始新的一年了。回顾2016年，我感觉是我技术进步很快的一年，在一家公司呆了也算一年多一个月了，感觉自己不管是技术上还是工作上还是为人处事上都成熟了好多。我先回顾总结下16年，再来展望17年。</p>
</blockquote>
<a id="more"></a>
<hr>
<h3 id="从php5-4到了php7"><a href="#从php5-4到了php7" class="headerlink" title="从php5.4到了php7"></a>从php5.4到了php7</h3><p>　　php一直被诟病为性能差点，16年年初，php7的稳定版就已经发布了，下面主要讲讲php7不同于php5的一些新特性。</p>
<ul>
<li>php7可以指定函数返回类型，7.1版本还可以用void返回类型</li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">xxxx</span><span class="params">()</span>: <span class="title">int</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>php7中函数中的参数可以指定类型(可以定义string int float bool这几种类型)</li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">xxx</span><span class="params">(int $a, string $b )</span></span>&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>php7支持匿名类</li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$a-&gt;xxxfunction (<span class="keyword">new</span> <span class="class"><span class="keyword">class</span></span>&#123;</div><div class="line"></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>　　其它还有很多好几个新特性，可以具体参考(<a href="http://php.net/manual/zh/migration70.new-features.php" target="_blank" rel="external">http://php.net/manual/zh/migration70.new-features.php</a>)</p>
<p>　　其实从php5到php7 内核发生了巨大的变化，我没有阅读过源码，这里就不说了。但是我知道php7带来的很多新特性，让这门语言重新散发了活力，虽然php5.5的时候就有了opcache,但是php7可以更加的将这些东西发扬光大吧。至于php7的性能优化，可以参考鸟哥的博客(<a href="http://www.laruence.com/2015/12/04/3086.html" target="_blank" rel="external">http://www.laruence.com/2015/12/04/3086.html</a>)</p>
<hr>
<h3 id="只知道api接口就是json-encode一下数据到明白接口的更多知识"><a href="#只知道api接口就是json-encode一下数据到明白接口的更多知识" class="headerlink" title="只知道api接口就是json_encode一下数据到明白接口的更多知识"></a>只知道api接口就是json_encode一下数据到明白接口的更多知识</h3><p>　　刚毕业的时候，我理解的接口就是给其它端提供数据的一个http的链接，因为那时候除了xml之外就只知道json。所以那时候就是把数据json格式化后就直接输出。后来我做着做着发现，有restful api 还有json rpc等。接口，并不意外着一定要用http请求，可以直接tcp的，甚至udp的。其实为什么要有接口，它只不过提供了一种不同程序直接的一种规范的数据交互。其实如果我们自己内部使用的话，完全可以自己预先定义好格式规范，像最近谷歌的protobuf已经支持php了，我感觉内部自己的数据交互，完全可以使用这个。但是如果和其它公司对接，或者对外开放接口，那么还是用流行的json比较好。</p>
<p>　　其实我感觉如果能自己定义一套服务协议，接口的核心是协议。鸟哥的<a href="https://github.com/laruence/yar" target="_blank" rel="external">yar</a>框架就是自己写了一套服务协议，只有遵循服务协议的双方才能互相通过接口来传输数据。</p>
<hr>
<h3 id="从简单的vc小框架到Laravel"><a href="#从简单的vc小框架到Laravel" class="headerlink" title="从简单的vc小框架到Laravel"></a>从简单的vc小框架到Laravel</h3><p>　　我最早学习php的时候，学了点语法糖之后，我就一直在用一个国内很流行的mvc框架ThinkPHP。那时候玩的最多的就是增删改查了。感觉世间万物无非就是增删改查。确实，业务类上的东西，确实可以用这四个字概括大部分了。那时候，我感觉好像增删改查用的很熟练就很懂mvc了。其实mvc只不过定义这样一套的结构来让你的代码耦合度稍微低一点，然后开发更高效。那时候我就感觉只要按照mvc写就无敌了。其实不是这样的，基于不同的业务场景，不一定非要mvc，你可以拆成更多的层来让你这边的代码更好维护。</p>
<p>　　大部分php框架都封装了ORM，所以大家都是建个数据库表的映射的Model,然后实现CRUD功能。其实这样没什么错。框架层面上，mvc不是完全定死的，而是根据你自己的项目上可以做调整的。我这边是去年三四月份开始接触这个在国外很流行的Laravel框架的。那时候也是因为公司要求用这个框架，自己就开始摸索着学习了。那时候看着这种绕来绕去的代码确实头疼，但是我从这个框架感触最深的就是面向接口编程的思想。后来学会基本的ORM操作之后，我去看了下它依赖注入的实现，看了它队列的实现(可以参考我的另外博文，里面有更详细的介绍)。这些是其它小框架所不能带给我的。</p>
<hr>
<h3 id="只会写简单的sql到基本的mysql性能优化"><a href="#只会写简单的sql到基本的mysql性能优化" class="headerlink" title="只会写简单的sql到基本的mysql性能优化"></a>只会写简单的sql到基本的mysql性能优化</h3><p>　　当年再学校里面也学过sql的语法，当初我的数据库老师告诉我，编程语言一直不断在更新迭代，然而sql的话其实更新迭代了那么多年，基本上没什么变化。所以那时候，老师告诉我当个dba，然后炒炒股，理理财，还是不错的。虽然我用过SQL Server，但是到了实际工作中，一直用着mysql。</p>
<p>　　杭州这边的很多公司都会问的面试问题是mysql的存储引擎innodb跟myisam的区别。其实如果只是单纯的回答的话，innodb支持事务，支持行锁，外键，而myisam不支持。innodb的索引跟myisam的索引本质也是不同的。百度出来的答案很多，其实要想自己理解的话，推荐去看一本高性能MySql的书，入门mysql还是蛮有用的。</p>
<p>　　还有很多人会问你索引的使用，联合索引的使用。其实索引也是存在数据库里面的，所以如果我们给某张表建了索引，那么如果你查询的时候用到了这个带索引的字段作为条件，肯定会提高查询速度。但是索引建立太多的话，在我们插入数据或者更新数据的时候，就会多一份开销，反而会降低插入与更新的速度，所以不能盲目建立索引，如果对于一些查询一直要用多个条件和起来查的话，可以使用联合索引。</p>
<p>　　还有要学会使用explain来分析sql性能。有时候，我们凭感觉是不知道怎么写sql才是最好的，而mysql这个东西可以让我们看到我们写的sql是否使用了索引，影响行数是多少等等这些信息。现在一般接口响应慢啊，页面卡啊，很多时候不是因为nginx或者php撑不住了，很多时候是sql太慢了。我的架构想法是，减少IO(即查询次数),然后可以多拆下表，业务划分的更细。不要一味追求一句话直接查完。如果遇到了sql怎么写都比较慢的情况，可以考虑重新设计下表，不一定要遵守范式，可以字段冗余。</p>
<p>　　最后贴上一张大佬送给我的mysql知识图<br><img src="http://ofnct0qsm.bkt.clouddn.com/MySQL.png" alt="mysql"><br><a href="http://ofnct0qsm.bkt.clouddn.com/MySQL.png" target="_blank">查看大图</a></p>
<hr>
<h3 id="从搞不清session-cookie以及get-post到理解基本的http"><a href="#从搞不清session-cookie以及get-post到理解基本的http" class="headerlink" title="从搞不清session cookie以及get post到理解基本的http"></a>从搞不清session cookie以及get post到理解基本的http</h3><p>　　很早以前我刚开始学PHP的时候，那时候我只知道session跟cookie功能类似。而且很多小公司的面试题其中就有一道问你session与cookie的区别。其实最主要的区别是，session存在与服务端，cookie存在浏览器。所以，很多服务端保存用户信息都是用的session，它的存储介质可以是文件，也可以是redis这种，而且我们自己也可以实现类似session的功能。而你为什么有些网站会问你记住账号密码吗，这些都是存在浏览器的，你把浏览器缓存全清了，这样你就又要重新输入账号密码了。</p>
<p>　　还有很多小公司的面试题会问你get与post的区别。当年我也不懂，我记得我的回答是，一般数据多的用post,一般数据小的用get。现在想想真的很好笑，然而这个问题你去百度，也会得到所谓的标准答案。什么get有大小限制，post没有限制，什么post比get安全。其实这些都只是表象，这些回答也曾经骗过我这种小白，着大半年以来，一直跟接口打交道，让我也明白了很多。其实get的参数暴露在url里面，然后url串的大小的限制是因为浏览器限制了它，而不是get方式限制了它。post的话，有个body体，貌似请求过去的参数我们看不到，其实也是能看到的，所以也不存在post更安全这种说法。到目前，我的理解中，其实get与post的区别只不过是以为http的一种请求方式不同，其实本质是一样的，如果我发一个get请求，然后也带上request body，这样可以吗，完全没问题，但是后端接收不到body里面的东西啊，这只是因为规范而设置的不同种类型，本质都是一个http请求。</p>
<hr>
<h3 id="从只会ftp跟简单的svn到熟练运用git"><a href="#从只会ftp跟简单的svn到熟练运用git" class="headerlink" title="从只会ftp跟简单的svn到熟练运用git"></a>从只会ftp跟简单的svn到熟练运用git</h3><p>　　记得15年毕业前夕，刚开始些项目写代码的时候，那时候很暴力，直接在服务器上用ftp连，改文件。那时候有可能改着改着，想还原到原来的代码，因为都是覆盖的，有时候都还原不回去了。所以我感觉这样太凶残，后来知道了有个svn的东西。可以用来管理项目代码。svn是没有分支的概念的，每个人从中心仓库拉下来代码，然后依次提交上去。但是万一有一天有个人提了错误的代码上去，这样每个人拉下来的代码都是错误的，还有svn没有分支这样的概念，svn所谓的分支只不过是一段copy。所以svn已经落伍了，它没法灵活的实现代码的版本控制。所以，git才是未来，而且现在也越来越火。git就像分布式服务器，每个人的电脑上就是一个完整的版本库，而且分支可以灵活切换。比如你写了一个基础的东西，然后A准备改写成A想要的，那么A基于你的代码创建了A分支并写了A的东西，B也想改写成适合B的东西，B基于你的分支创建了B分支，并且写了B的东西。有一天，有人要用到AB混合的功能，那只要这两个分支合并一下就好了。<br>　　而git跟现在这种测试服，正式服这样的代码上线的流程能更好的结合起来。所以我感觉，未来，svn肯定越来越暗淡，然后git会成为一个程序员所必须要掌握的技巧</p>
<p>下面是一张git使用总结。<br><img src="http://ofnct0qsm.bkt.clouddn.com/Git%20%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.png" alt="git"><br><a href="http://ofnct0qsm.bkt.clouddn.com/Git%20%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.png" target="_blank">查看大图</a></p>
<hr>
<h3 id="2017年的新展望！学习swoole-基于开源项目搭建一套api小框架"><a href="#2017年的新展望！学习swoole-基于开源项目搭建一套api小框架" class="headerlink" title="2017年的新展望！学习swoole,基于开源项目搭建一套api小框架"></a>2017年的新展望！学习swoole,基于开源项目搭建一套api小框架</h3><p>　　目前以我的知识，前端基础差，暂时没考虑做全栈，因为后端都还没学好！所以先写个不臃肿的，支持稍微高并发，响应速度快，稳定的后端api接口的小型php框架。目前以我了解到的开源项目，准备用基于有赞的zan框架；路由准备借鉴<a href="https://github.com/thephpleague/route" target="_blank" rel="external">https://github.com/thephpleague/route</a> ;HTTP请求跟响应准备借鉴Symfony框架的HTTP Request跟Response ,不过swoole已经提供比较完善的http request了;根据自己已有的积累完善第三方包。对于api的考虑，我会有频率控制，有返回层，以及对于一些并发的时候可能会出现的bug等方面的考虑。最后再来写那些烦人的拼接sql的ORM。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;转眼16年就过去了，过年也比较早，1月份就是春节了。去年9月10月的时候感觉时间过的好慢，而后又感觉自己玩了两月，怎么那么快就过完年了。元宵也过了，传统意义上的年已经过完了，是时候开始新的一年了。回顾2016年，我感觉是我技术进步很快的一年，在一家公司呆了也算一年多一个月了，感觉自己不管是技术上还是工作上还是为人处事上都成熟了好多。我先回顾总结下16年，再来展望17年。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="自我总结" scheme="https://sanit1.github.io/tags/%E8%87%AA%E6%88%91%E6%80%BB%E7%BB%93/"/>
    
      <category term="自我评价" scheme="https://sanit1.github.io/tags/%E8%87%AA%E6%88%91%E8%AF%84%E4%BB%B7/"/>
    
      <category term="2017展望" scheme="https://sanit1.github.io/tags/2017%E5%B1%95%E6%9C%9B/"/>
    
  </entry>
  
  <entry>
    <title>Laravel依赖注入的实现</title>
    <link href="https://sanit1.github.io/2017/01/08/Laravel%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>https://sanit1.github.io/2017/01/08/Laravel依赖注入的实现/</id>
    <published>2017-01-07T18:02:58.000Z</published>
    <updated>2017-04-04T05:41:22.361Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>什么是依赖注入？依赖注入其实和控制反转是一个概念，这个特性在这个框架各个地方都有体现。最傻逼的说法就是没new了，尽可能的解耦代码。就是A类里面的需要依赖到B类，依赖注入的话直接把B类的实例注入到A类实现的方法中，而不是直接在A方法里面new。大大降低了代码的耦合<br><a id="more"></a></p>
<hr>
</blockquote>
<h3 id="php简单的依赖注入实现"><a href="#php简单的依赖注入实现" class="headerlink" title="php简单的依赖注入实现"></a>php简单的依赖注入实现</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Notify</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">send</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SMS</span> <span class="keyword">implements</span> <span class="title">Notify</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">send</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">'send SMS'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Voice</span> <span class="keyword">implements</span> <span class="title">Notify</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">send</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">'send Voice'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sendNotify</span><span class="params">(Notify $notify)</span></span></div><div class="line">    &#123;</div><div class="line">        $notify-&gt;send();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$user = <span class="keyword">new</span> User;</div><div class="line">$user-&gt;sendNotify(<span class="keyword">new</span> SMS);</div></pre></td></tr></table></figure>
<p>这里我简化了日常的业务逻辑。我们要对一个用户发送通知，可以用短信发送也可以通过语音发送等等。如果不用依赖注入，我们直接在User类你们new一个SMS或者Voice类。当然也是没问题的。但是突然有一天，老板说改成Email对用户发送通知，好了 我们User类要改，具体调用user类的地方也要改。当然实际的业务逻辑更复杂。在日积月累的情况下代码就变得更不好维护了。依赖注入让我们的业务中调用的是接口，而不是具体的类，实现了代码的解耦。这样子，就算老板让我们改成用邮件对用户发送通知，我们只要新建个实现了Notify接口的Email类，然后在具体调用的时候传这个Email类过去就行了。</p>
<p>　　但是，我们不免看到这样new来new去还是有点多(创建类是必不可少的)，Laravel的代码很优雅，我们很少看到它new来new去。那么他是怎么做到的呢？</p>
<hr>
<h3 id="Laravel中依赖注入的实现"><a href="#Laravel中依赖注入的实现" class="headerlink" title="Laravel中依赖注入的实现"></a>Laravel中依赖注入的实现</h3><p>　　在用Laravel框架的时候，我们在控制器只要把类注入进去，就能直接调用，貌似没有看到具体在哪里new的。那是因为Laraver的控制器要求你都要继承它的BaseController。框架在运行的时候直接从容器中解析你注入进去的类给你实例化了。什么是容器，就是一个智能并高级的工厂。容器不需要被告知如何构建对象，它是通过PHP的反射类<a href="!http://php.net/manual/zh/class.reflectionclass.php">ReflectionClass</a>来解析出具体的对象。所以我们就看不到具体在使用Laravel的时候，看它一直在注入类，却看不到它具体是在哪里new的。</p>
<p><b>容器类(Container)的实现原理</b></p>
<p>Larvel的容器类在/vendor/laravel/framework/src/Illuminate/Container/Container。我们打开可以看到一个非常长的类。咋一看不知道干嘛的，看不懂，一开始我也是。所以我简化了下容器，自己写了个容器类。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Container</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">protected</span> $bindings = [];</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">bind</span><span class="params">($abstract, $concrete = null, $shared = false)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(! $concrete <span class="keyword">instanceof</span> Closure)&#123;</div><div class="line">            $concrete = <span class="keyword">$this</span>-&gt;getClosure($abstract,$concrete);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">$this</span>-&gt;bindings[$abstract] = compact(<span class="string">'concrete'</span>, <span class="string">'shared'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getClosure</span><span class="params">($abstract, $concrete)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">($c, $parameters = [])</span> <span class="title">use</span> <span class="params">($abstract, $concrete)</span></span></div><div class="line">        &#123;</div><div class="line">            $method = ($abstract == $concrete) ? <span class="string">'build'</span> : <span class="string">'make'</span>;</div><div class="line">            <span class="keyword">return</span> $c-&gt;$method($concrete,$parameters);</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">make</span><span class="params">($abstract,$parameters = [])</span></span></div><div class="line">    &#123;</div><div class="line">        $concrete = <span class="keyword">$this</span>-&gt;getConcrete($abstract);</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;isBuildable($concrete, $abstract)) &#123;</div><div class="line">            $object = <span class="keyword">$this</span>-&gt;build($concrete,$parameters);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            $object = <span class="keyword">$this</span>-&gt;make($concrete,$parameters);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> $object;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">isBuildable</span><span class="params">($concrete, $abstract)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> $concrete === $abstract || $concrete <span class="keyword">instanceof</span> Closure;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">getConcrete</span><span class="params">($abstract)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(! <span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;bindings[$abstract]))</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> $abstract;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;bindings[$abstract][<span class="string">'concrete'</span>];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">build</span><span class="params">($concrete,$parameters=[])</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>($concrete <span class="keyword">instanceof</span> Closure)&#123;</div><div class="line">            <span class="keyword">return</span> $concrete(<span class="keyword">$this</span>,$parameters);</div><div class="line">        &#125;</div><div class="line">        $reflector = <span class="keyword">new</span> ReflectionClass($concrete);</div><div class="line">        <span class="keyword">if</span>(! $reflector-&gt;isInstantiable()) &#123;</div><div class="line">            <span class="keyword">return</span> $message= <span class="string">"Target [$concrete] is not instantiable."</span>;</div><div class="line">        &#125;</div><div class="line">        $constructor = $reflector-&gt;getConstructor();</div><div class="line">        <span class="keyword">if</span> (is_null($constructor)) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> $concrete;</div><div class="line">        &#125;</div><div class="line">        $dependencies = $constructor-&gt;getParameters();</div><div class="line">        $instances = <span class="keyword">$this</span>-&gt;getDependencies($dependencies,$parameters);</div><div class="line">        <span class="keyword">return</span> $reflector-&gt;newInstanceArgs($instances);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">getDependencies</span><span class="params">($parameters,array $primitives = [])</span></span></div><div class="line">    &#123;</div><div class="line">        $dependencies = [];</div><div class="line">        <span class="keyword">foreach</span> ($parameters <span class="keyword">as</span> $parameter)</div><div class="line">        &#123;</div><div class="line">            $dependency = $parameter-&gt;getClass();</div><div class="line">            <span class="keyword">if</span>(array_key_exists($parameter-&gt;name,$primitives))&#123;</div><div class="line">                $dependencies[] = $primitives[$parameter-&gt;name];</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(is_null($dependency))&#123;</div><div class="line">                $dependencies[] = <span class="keyword">NULL</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                $dependencies[] = <span class="keyword">$this</span>-&gt;resolveClass($parameter);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> (<span class="keyword">array</span>) $dependencies;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">resolveClass</span><span class="params">(ReflectionParameter $parameter)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;make($parameter-&gt;getClass()-&gt;name);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Notify</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">send</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SMS</span> <span class="keyword">implements</span> <span class="title">Notify</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">send</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">'SMS send'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mail</span> <span class="keyword">implements</span> <span class="title">Notify</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">send</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">'Mail send'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Push</span> <span class="keyword">implements</span> <span class="title">Notify</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">send</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">'Push send'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Message</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">protected</span> $notifyTool;</div><div class="line">    <span class="keyword">protected</span> $config;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(Notify $notify,$parameters = [])</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;notifyTool = $notify;</div><div class="line">        <span class="keyword">$this</span>-&gt;config = $parameters;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sendMessage</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;notifyTool-&gt;send();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$app = <span class="keyword">new</span> Container();</div><div class="line">$app-&gt;bind(<span class="string">'Notify'</span>,<span class="string">'Sms'</span>);</div><div class="line">$app-&gt;bind(<span class="string">'message'</span>,<span class="string">'Message'</span>);</div><div class="line">$msg = $app-&gt;make(<span class="string">'message'</span>,[<span class="string">'parameters'</span>=&gt;<span class="string">'额外参数'</span>]);</div><div class="line">$msg-&gt;sendMessage();</div></pre></td></tr></table></figure>
<p>容器的实现过程主要依赖php的反射类，一个参数传过来的时候，通过反射可以知道这个类是否可以被实例化，方法存不存在。你看,这样的话我们是不是基本上没有new了。其实不是没new了，而是通过反射，只要写好这样一个通用的容器，new的过程还是有的，只不过都在容器里面了。我写的这个容器还是要通过手动绑定参数来实现，Laravel的服务容器当然更高级，Laravel容器的核心代码基本都在我这里体现了。Laravel的容器能根据类的依赖需求，自动在已经注册、绑定的一堆实例中找到符合需求的，自动注入。</p>
<p>　　到这里，依赖注入的实现基本上也讲完了。Laravel还有个Facade(门面),其实我感觉这个没多大用,但是有些人在刚接触Laravel的时候有困惑，我稍微带过一下。门面其实把容器里面绑定好的类在套一层，然后用php的魔术方法<code>__callStatic()</code>来实现像是静态的调用不是静态的各个方法。</p>
<h3 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h3><p>　　代码想要实现完全解耦是不可能的。我们只能通过巧妙的设计，让耦合度尽可能的降低，方便维护。java的依赖在配置文件用xml配置好，然后就可以实现依赖注入了。由于表达能力有限，自己理解能力也不是完全的彻底。如果看到这篇文章还有疑惑的可以继续参考以下文章：</p>
<p><a href="http://laravelacademy.org/post/769.html" target="_blank" rel="external">http://laravelacademy.org/post/769.html</a> </p>
<p><a href="https://segmentfault.com/a/1190000002411255" target="_blank" rel="external">https://segmentfault.com/a/1190000002411255</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;什么是依赖注入？依赖注入其实和控制反转是一个概念，这个特性在这个框架各个地方都有体现。最傻逼的说法就是没new了，尽可能的解耦代码。就是A类里面的需要依赖到B类，依赖注入的话直接把B类的实例注入到A类实现的方法中，而不是直接在A方法里面new。大大降低了代码的耦合&lt;br&gt;
    
    </summary>
    
    
      <category term="Laravel" scheme="https://sanit1.github.io/tags/Laravel/"/>
    
      <category term="IOC容器" scheme="https://sanit1.github.io/tags/IOC%E5%AE%B9%E5%99%A8/"/>
    
      <category term="依赖注入" scheme="https://sanit1.github.io/tags/%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>Docker的简单使用</title>
    <link href="https://sanit1.github.io/2016/12/01/Docker%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
    <id>https://sanit1.github.io/2016/12/01/Docker的简单使用/</id>
    <published>2016-11-30T17:59:24.000Z</published>
    <updated>2017-04-04T05:43:04.030Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>最近这个docker容器很火。好多牛逼的公司拿它来布置各样的环境啊，布置分布式啊等等。当然，作为码畜的我，玩的没其它人高级。正好公司要求线上环境要跟自己的开发环境保持一致，我就用上了docker<br><a id="more"></a></p>
<hr>
</blockquote>
<h3 id="什么是Docker"><a href="#什么是Docker" class="headerlink" title="什么是Docker"></a>什么是Docker</h3><p>　　根据百度百科的定义:Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口。其实docker就是一个容器的概念，这个容器可以运行各种镜像。比如你线上的环境是lnmp,你可以打包成一个docker镜像，你自己做负载或者要求多台服务器环境一样的时候，每台装个docker。然后run同样的镜像，那么就能保持各个环境的一致。而且你一台服务器可以跑多个镜像哦。</p>
<hr>
<h3 id="Docker的安装"><a href="#Docker的安装" class="headerlink" title="Docker的安装"></a>Docker的安装</h3><p>　　Docker的安装也很简单，我们打开<a href="https://www.docker.com/" target="_blank" rel="external">docker官网</a>。官网有介绍docker的安装。我简单的来说明一下吧。如果你的电脑是Windows操作系统，最好升级到win10,docker在不是win10专业版或者企业版的电脑上也可以跑，不过这时候你是没法安装docker for windows的，这时候，docker是要在virtualbox运行的。也就相当于你Windows开了个虚拟机来跑docker.我上述讲的那两个版本的Windows能跑docker是因为win10自带虚拟机——Hyper-V。所以能运行docker.至于在linux下的安装，我主要用的Centos，你要想安装docker,你得把你的linux内核升到3以上。大部分人用的都是Centos6.5.他的内核是基于linux2.6的。如果你用的是Centos7.那你什么都不用管，可以直接安装，如果用的是6.5的，你可以选择换成7或者你可以在不升级操作系统，只升级它的内核。至于具体怎么升级，这里不展开讲，我有空也会在我的博客更新的。其实百度下有很多，只不过都是良莠不齐。具体的安装过程很简单，只要你满足我上述讲的条件的机子，因为比较穷，玩不起mac,没在mac下安装过，基本上几分钟就安装好了。<a href="https://docs.docker.com/engine/getstarted/" target="_blank" rel="external">docker安装过程</a></p>
<hr>
<h3 id="运行docker容器"><a href="#运行docker容器" class="headerlink" title="运行docker容器"></a>运行docker容器</h3><p>　　安装好Docker后，我们得有个镜像才能让容器跑起来(Windows下直接打开cmd命令行)。首先我们先登录一个docker仓库：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker login --username=xxxxx</div></pre></td></tr></table></figure></p>
<p>然后根据提示输入密码，登录成功。然后<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker pull 镜像名称:镜像tag</div></pre></td></tr></table></figure></p>
<p>阿里云有免费的docker仓库，我就拿来用了。然后你需要做的就是等待镜像下载好。下载好后，我们可以通过</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker images -a</div></pre></td></tr></table></figure>
<p>查看已经下载的镜像。如果你直接docker pull的话，应该是从dockerhub上载公共镜像的<br><img src="http://ofnct0qsm.bkt.clouddn.com/dockerPull.png" alt="docker pull成功的结果"><br>这就是我下载好的镜像。我们怎么把它跑起来呢？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run -itd --name work  -p  80:80  -v d:/work/:/dockerdata/www/ registry.cn-hangzhou.aliyuncs.com/hsn/lnmp:160930</div></pre></td></tr></table></figure>
<p>我主要讲下几个重要的参数 –name是指你要跑起来容器的名字，-p是端口映射的意思，就是把本机的80端口映射到虚拟机里面的80端口，-v是绑定目录的意思，就是把你本机的目录绑定到docker容器里面。后面跟的就是你的镜像。run好我们的容器之后，我们开始进入容器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker attach 你run的容器名字</div></pre></td></tr></table></figure></p>
<p>这时候我们就进入了我们run起来的容器了。如果你忘记了容器名字，你可以用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker ps -a</div></pre></td></tr></table></figure></p>
<p>来查看你所有run的容器。同一个镜像可以被run多个容器。<a href="http://www.infoq.com/cn/articles/docker-command-line-quest/" target="_blank" rel="external">更多docker run参数说明参考</a></p>
<hr>
<h3 id="在docker容器里面跑项目"><a href="#在docker容器里面跑项目" class="headerlink" title="在docker容器里面跑项目"></a>在docker容器里面跑项目</h3><p>因为我刚才在我把本机的80端口映射到docker容器的80端口。我在容器里面有nginx。所以我只要这样配置就能跑起nginx服务。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">listen 80;</div><div class="line">server_name book.work.dev;(自己定的域名)</div><div class="line">index index.html index.htm index.php default.html default.htm default.php;</div><div class="line">root  /dockerdata/www/book/public;(容器里面项目的入口,对应的就是我挂载的D:/work/book/public)</div></pre></td></tr></table></figure></p>
<p>自己本机的host这样改<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">192.168.10.207  book.work.dev(host域名指向本机的ip,不走公网的dns)</div></pre></td></tr></table></figure></p>
<p>ok,打开浏览器，我们就能愉快的玩耍了。</p>
<hr>
<h3 id="上传镜像到自己的仓库"><a href="#上传镜像到自己的仓库" class="headerlink" title="上传镜像到自己的仓库"></a>上传镜像到自己的仓库</h3><p>比如有时候我们装了个redis啊，装了个mongodb啊，我们想下次使用的时候容器还会有这些东西。也简单的，我这里以阿里云的docker仓库为例。登录<a href="https://dev.aliyun.com" target="_blank" rel="external">阿里云docker仓库</a>.然后创建个本地镜像仓库。然后<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">docker login --username=xxxxx registry.cn-hangzhou.aliyuncs.com</div><div class="line">docker tag [ImageId] registry.cn-hangzhou.aliyuncs.com/hsn/test:[镜像版本号]</div><div class="line">docker push registry.cn-hangzhou.aliyuncs.com/hsn/test:[镜像版本号]</div></pre></td></tr></table></figure></p>
<p><img src="http://ofnct0qsm.bkt.clouddn.com/dockerpush.png" alt="docker push"><br>每次给你的容器打个tag就能推送到阿里云的docker仓库了。</p>
<hr>
<h3 id="如何在本地制作Docker镜像"><a href="#如何在本地制作Docker镜像" class="headerlink" title="如何在本地制作Docker镜像"></a>如何在本地制作Docker镜像</h3><hr>
<h3 id="Docker的高级玩法-docker-file"><a href="#Docker的高级玩法-docker-file" class="headerlink" title="Docker的高级玩法(docker-file)"></a>Docker的高级玩法(docker-file)</h3><hr>
<h3 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h3><hr>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;最近这个docker容器很火。好多牛逼的公司拿它来布置各样的环境啊，布置分布式啊等等。当然，作为码畜的我，玩的没其它人高级。正好公司要求线上环境要跟自己的开发环境保持一致，我就用上了docker&lt;br&gt;
    
    </summary>
    
    
      <category term="Docker" scheme="https://sanit1.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>存在就更新，不存在就插入在并发情景下一个常见的BUG探讨</title>
    <link href="https://sanit1.github.io/2016/11/16/%E5%AD%98%E5%9C%A8%E5%B0%B1%E6%9B%B4%E6%96%B0%EF%BC%8C%E4%B8%8D%E5%AD%98%E5%9C%A8%E5%B0%B1%E6%8F%92%E5%85%A5%E5%9C%A8%E5%B9%B6%E5%8F%91%E6%83%85%E6%99%AF%E4%B8%8B%E4%B8%80%E4%B8%AA%E5%B8%B8%E8%A7%81%E7%9A%84BUG%E6%8E%A2%E8%AE%A8/"/>
    <id>https://sanit1.github.io/2016/11/16/存在就更新，不存在就插入在并发情景下一个常见的BUG探讨/</id>
    <published>2016-11-15T17:58:13.000Z</published>
    <updated>2017-04-04T05:42:47.250Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>有些框架直接在 ORM 里面封装了这种 update or insert 的操作，分析源码，可能是直接用 mysql 的 <strong>ON DUPLICATE KEY UPDATE</strong> 或者就是先查询判断存不存在,再插入。而今天我们就来讨论后者。<br><a id="more"></a></p>
<hr>
</blockquote>
<h3 id="BUG举例"><a href="#BUG举例" class="headerlink" title="BUG举例"></a>BUG举例</h3><p>　　因为这个bug是公司的实际业务逻辑，所以我下面不贴出具体的代码，以伪代码说明。一开始写的时候大家都在赶工，没考虑到各种情况，业务都稳定的情况下，突然有一天，有人告诉我，线上的公司表出现两条一某一样的公司信息，申请人也是同一个，什么都一样。我仔细回来检查，具体的业务代码是这样的：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$company = db-&gt;where(<span class="string">'根据输入的信息'</span>)-&gt;select();</div><div class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>($company)&#123;</div><div class="line">    db-&gt;update(<span class="string">'根据输入的信息'</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span>&#123;</div><div class="line">    db-&gt;insert(<span class="string">'根据输入的信息'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>　　我一开始不相信这样的代码会出现bug,自己拿号不断去试，结果自己怎么提交最多存进去一条啊，有记录就会更新。我感觉是不是测试坑我。因为还有种极端的情况下我没考虑。那就是万恶的并发！！！于是我就开始去用<a href="http://baike.baidu.com/link?url=oxqKIXKhh3k-fc2wDXDyAevQItL2br4Xit6ozi2QhN5eiRa99baS7ksPYSdZKiR8A6bKCYXzWaE5nsukhaGzyK" target="_blank" rel="external">apache</a>自带的<a href="http://baike.baidu.com/subview/32903/6675457.htm#viewPageContent" target="_blank" rel="external">ab</a>程序去模拟并发。至于这个工具具体怎么用，我也只会基础的，这里就不继续展开讲了。我就用基础的模拟<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ab -c 3 -n 3 -p post.txt application/x-www-form-urlencoded http://xxx.xxx.xxx/xx</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-n</div></pre></td></tr></table></figure>
<p>表示总的请求数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-c</div></pre></td></tr></table></figure></p>
<p>表示并发数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-p</div></pre></td></tr></table></figure></p>
<p>表示请求方式是 post ,<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">post.txt</div></pre></td></tr></table></figure></p>
<p>就是我要请求接口的数据<br>里面就是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">a=xx&amp;b=xxx</div></pre></td></tr></table></figure></p>
<p>这种格式。再后面跟着的就是接口的请求地址了。因为这里不想插爆库，就直接用小点的数量模拟，然后发现数据库里面确实存进去了3条一模一样的数据。这就是造成 bug 最直接的原因，前端没有做判断，可能别人手抖，直接点了两下，直接post了两次，就像并发一样。</p>
<hr>
<h3 id="目前我的解决办法"><a href="#目前我的解决办法" class="headerlink" title="目前我的解决办法"></a>目前我的解决办法</h3><p>　　其实这完全是可以避免的 bug，因为既然我们有这样的业务逻辑，但是表结构没这么设计，然后因为有历史遗留数据的问题，所以很蛋疼。先来说说第一种解决办法吧</p>
<ul>
<li><strong>修改表结构</strong></li>
</ul>
<p>既然业务这么设计，我们只要给表增加唯一索引，这样子，来再多的并发，同样的数据只能有一条。由于我只是个小兵，没有改数据库的权限，然后根据具体的业务，产品告诉我也还是可以允许这样重复的数据存在的（此刻我已经泪奔 T . T）。所以我的业务设计本身就有缺陷，又要防止这种不必要的并发，所以改唯一索引对我的情况是没用的。其实大部分情况下，一般的处理办法就是给这个表建立一个或者多个 index key(索引)。这样数据库就能帮我们保证数据的唯一性。其实我一开始说的 mysql 自带的 ON DUPLICATE KEY UPDATE 也是需要有索引才能用的。</p>
<ul>
<li><strong>锁表</strong></li>
</ul>
<p>既然是为了防止并发的重复数据提交，锁表轻松解决问题！什么是锁表，所谓的锁表就是——这表被我锁住了，其它人想进来，得先等老子操作完，解锁才给你用。这样并发进来的情况下，就算是并发，还是有先后顺序的，第一个人只要锁住表，后面的并发得等第一个人执行完，才能使用表，这样就会走else分支，直接更新，而不会继续插入。</p>
<ul>
<li><strong>使用队列</strong></li>
</ul>
<p>这样场景下，并发就像一条直线的数据进来就像这样<br><img src="http://ofnct0qsm.bkt.clouddn.com/%E5%B9%B6%E5%8F%91.png" alt="并发队列处理"><br>这样子我们就可以错开并发，从队列依次取，就会执行正常的业务逻辑。</p>
<ul>
<li><strong>数据先经缓存，再入库</strong></li>
</ul>
<p>这其实就是一个比队列更简易的处理方式，因为这种业务逻辑下，我们并没有完全发挥出队列的全部优势，可以先让数据经过一遍缓存，缓存中帮我们过滤了那些重复的数据，然后我们执行正常的逻辑也不影响。代码逻辑可以这样写<br>app(‘redis’)-&gt;setnx(md5(请求的参数)); 再根据你的实际业务需求设置这个key的过期时间。只有在set成功的情况下再进入库(测试过，就算并发进来。对用一个key只可能set成功一次)。setnx命令参考(<a href="http://doc.redisfans.com/string/setnx.html" target="_blank" rel="external">http://doc.redisfans.com/string/setnx.html</a>)</p>
<h3 id="问题引伸的思考"><a href="#问题引伸的思考" class="headerlink" title="问题引伸的思考"></a>问题引伸的思考</h3><p>　　其实在一些小公司，连个DBA都没有的情况下。因为业务人员的不细心已经工作人员敲代码只为量不为结果，可能就导致这样的问题出现。我也是通过这个问题知道了一些本来我不熟悉的知识。我不知道大公司的处理流程是怎样的，肯定不会有这样的问题。但是引发了我的思考，是不是大公司他们对于一些并发或者操作频繁的数据，都是先进过一层像redis之类的缓存层，然后再入库到mysql或者其它数据库。这就相当于一个从缓存到磁盘的过程，貌似也符合操作系统的逻辑。我只是个小打字员，也没法接触大公司的业务，只能自己想想。如果你有幸看到这文章，并且感觉我的想法是错的话，可以与我讨论。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;有些框架直接在 ORM 里面封装了这种 update or insert 的操作，分析源码，可能是直接用 mysql 的 &lt;strong&gt;ON DUPLICATE KEY UPDATE&lt;/strong&gt; 或者就是先查询判断存不存在,再插入。而今天我们就来讨论后者。&lt;br&gt;
    
    </summary>
    
    
      <category term="update or insert" scheme="https://sanit1.github.io/tags/update-or-insert/"/>
    
      <category term="并发插入" scheme="https://sanit1.github.io/tags/%E5%B9%B6%E5%8F%91%E6%8F%92%E5%85%A5/"/>
    
      <category term="bug" scheme="https://sanit1.github.io/tags/bug/"/>
    
  </entry>
  
  <entry>
    <title>API文档自动生成</title>
    <link href="https://sanit1.github.io/2016/10/24/API%E6%96%87%E6%A1%A3%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90/"/>
    <id>https://sanit1.github.io/2016/10/24/API文档自动生成/</id>
    <published>2016-10-23T17:50:00.000Z</published>
    <updated>2017-04-04T05:40:16.782Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>本文主要讲述自动化API文档生成——apidoc。网上有几个篇文章都只是介绍apidoc的，具体怎么在自己的项目中使用以及与其他配合使用都是没介绍的。最近开始玩服务器，了解到了有Windows与Linux之间共享文件的方法，就是samba。然后具体和apidoc结合起来非常好用，所以本文就当做笔记来把它记录下来了<br><a id="more"></a></p>
<hr>
</blockquote>
<h3 id="apidoc简介"><a href="#apidoc简介" class="headerlink" title="apidoc简介"></a>apidoc简介</h3><p>　　apidoc是node的一个插件，它的功能就是能让把我们的代码注释生成api文档。它支持php java javascript python等多中语言。因为写接口的同学通常很烦写完接口还得写文档，文档更新又麻烦。apidoc不仅支持项目的版本，也支持api的版本。在我所接触过的文档生成工具里面，这个是我感觉比较好用的。</p>
<hr>
<h3 id="apidoc的安装"><a href="#apidoc的安装" class="headerlink" title="apidoc的安装"></a>apidoc的安装</h3><p>　　apidoc是node的一个插件，那么它的安装就依赖node。node的具体安装我这里就不详细说了，去node官网下包,解压，编译然后安装。直接执行:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install apidoc -g</div></pre></td></tr></table></figure></p>
<hr>
<h3 id="samba的安装"><a href="#samba的安装" class="headerlink" title="samba的安装"></a>samba的安装</h3><p>　　samba的安装也很简单，本人用的是CentOS，我直接执行<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install samba</div></pre></td></tr></table></figure></p>
<p>  就安装好了。</p>
<hr>
<h3 id="samba的配置"><a href="#samba的配置" class="headerlink" title="samba的配置"></a>samba的配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[public]</div><div class="line">comment = Public Stuff</div><div class="line">path = /share/doc  你需要共享文件夹的路径</div><div class="line">browseable = yes  可浏览性 </div><div class="line">guest ok = yes  是否允许访客</div><div class="line">public = yes  是否可上传</div><div class="line">writable = yes  是否可写</div></pre></td></tr></table></figure>
<p>我自己装的时候也都是这么配置的，注意，这个samba需要你关闭你的防火墙，还得把你共享的目录赋予777的权限（貌似755就够了，我直接给了777）。我这边还遇到过一个很坑爹的问题，就是这样配置了，用Windows访问这个共享目录的时候，要求我输入用户名和密码。其实主要还得把上面的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">security = user</div></pre></td></tr></table></figure></p>
<p>改成<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">security = share</div></pre></td></tr></table></figure></p>
<p>samba也是支持用户管理的，就是可以分配账号密码的，具体的就不展开介绍了。</p>
<hr>
<h3 id="apidoc的使用"><a href="#apidoc的使用" class="headerlink" title="apidoc的使用"></a>apidoc的使用</h3><p>　　例如我们在代码里面下了这样的一段注释:<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * @api &#123;get post&#125; /brand/:id/:name/:new 这里中括号里面填的的是请求方式（GET POST OPTION DELETE等），后面填的是路由</div><div class="line"> * @apiGroup brandList API接口所在的组名称</div><div class="line"> * @apiName  brands  API接口名称</div><div class="line"> * @apiVersion 1.0.1 API接口版本</div><div class="line"> * @apiDescription  API接口的描述</div><div class="line"> *</div><div class="line"> * @apiParam (入参) &#123;Number&#123;1-9999&#125;&#125;()这个括号里面的天的参数的组，括号里面相同的会被放在同一个表格里面 id=0 请求参数 大括号里面填的是参数类型 里面的大括号表示值的范围 后面就是参数的名称和默认值</div><div class="line"> * @apiParam (入参) &#123;String=&quot;a&quot;,&quot;b&quot;,&quot;c&quot;&#125; name 品牌名称,等于号表示允许值</div><div class="line"> * @apiParam (入参) &#123;Boolean&#125; new </div><div class="line"> * @apiParam (入参) &#123;Number&#125; [test] 如果参数套上[]这样的中括号，表明这个值是个可选的值</div><div class="line"> *</div><div class="line"> * @apiParamExample &#123;json&#125; 接口返回值</div><div class="line"> * &#123;</div><div class="line"> *     &quot;code&quot; : 0,</div><div class="line"> *     &quot;message&quot; : &quot;success&quot;,</div><div class="line"> *     &quot;data&quot; : &#123;</div><div class="line"> *         &quot;result&quot; : &quot;ok&quot;</div><div class="line"> *     &#125;</div><div class="line"> * &#125;</div><div class="line"> * @apiSampleRequest  下面就是一个模拟请求器，可以帮我们调试接口</div><div class="line"> *     http://www.work.dev</div><div class="line"> *</div><div class="line"> */</div></pre></td></tr></table></figure></p>
<p>基本上用这些已经足够了，其他的用法可以参考它的官网:<a href="http://apidocjs.com/" target="_blank" rel="external">http://apidocjs.com/</a></p>
<hr>
<h3 id="生成apidoc"><a href="#生成apidoc" class="headerlink" title="生成apidoc"></a>生成apidoc</h3><p>　　假如我在我的控制器里面写了这样一段注释:<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * @api &#123;GET&#125; /user_info 获取用户信息接口</div><div class="line"> * @apiGroup User</div><div class="line"> * @apiVersion 2.0.0</div><div class="line"> * @apiDescription 获取用户信息</div><div class="line"> *</div><div class="line"> * @apiParam (入参) &#123;String&#125; token 登录成功后客户端返回的token</div><div class="line"> *</div><div class="line"> * @apiSuccessExample Success-Response:</div><div class="line"> *  &#123;</div><div class="line"> *      &quot;code&quot;: 0,</div><div class="line"> *      &quot;message&quot;: &quot;ok&quot;</div><div class="line"> *      &quot;data&quot;: &#123;</div><div class="line"> *           &quot;name&quot;: &quot;1&quot;,//状态 0:启用 1:停用</div><div class="line"> *           &quot;role&quot;: &quot;1&quot;,//1管理员，0是普通员工</div><div class="line"> *           &quot;sex&quot;: &quot;1&quot;,//1表示男性，2表示女性</div><div class="line"> *      &#125;</div><div class="line"> *  &#125;</div><div class="line"> *</div><div class="line"> * @apiSampleRequest</div><div class="line"> * http://api.test.com/user_info</div><div class="line"> *</div><div class="line"> */</div></pre></td></tr></table></figure></p>
<p>  先cd到项目里面<br>  然后执行这样的语句:</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apidoc -i app/Http/Controllers -o \\115.28.231.211\public\</div></pre></td></tr></table></figure>
<p>  因为我samba共享的是这样一个文件夹，并且在这个里面放文档。然后我们来看下生成的结果<br> <img src="http://ofnct0qsm.bkt.clouddn.com/apidoc%E7%94%9F%E6%88%90%E7%9A%84%E7%BB%93%E6%9E%9C.png" alt=""><br> 这时候我们直接点击index.html可以直接看到这样的静态页面:<br> <img src="http://ofnct0qsm.bkt.clouddn.com/%E6%89%93%E5%BC%80%E9%A1%B5%E9%9D%A2%E7%9A%84%E7%BB%93%E6%9E%9C.png" alt=""></p>
<hr>
<h3 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h3><p> 　　到这里，我们就已经很方便的能运用apidoc了，我们可以自己直接写好接口的时候直接写注释，一句命令写到开了samba的服务器上，然后直接访问静态页面，如果不想这样赤裸裸的访问静态页面，可以用node或者nginx直接绑上去，这里就不继续展开讲了。</p>
<hr>
<h3 id="后续补充"><a href="#后续补充" class="headerlink" title="后续补充"></a>后续补充</h3><p>　　其实在使用中的时候会发现一些很坑爹的问题，就是GroupName没法用中文，但是其他地方可以用中文。毕竟这个是国外大佬发明的，不是国人的产物，有存在这样的问题也在所难免。我不断的搜，发现github上有人给他提issure。也有给出了解决方案，apidoc的语法其实是支持引用的，所以我们可以这样定义<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * @apiDefine name 测试中文</div><div class="line"> */</div></pre></td></tr></table></figure></p>
<p>然后我们怎么使用呢。可以直接<code>@apiUse name</code>也可以直接在注释里面写<code>name</code>,这样就可以使用中文了。</p>
<p>　　<font color="red">这个东西唯一让我不爽的就是有可能一大段注释只是为了生成接口文档！！！其它真的很好用</font></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文主要讲述自动化API文档生成——apidoc。网上有几个篇文章都只是介绍apidoc的，具体怎么在自己的项目中使用以及与其他配合使用都是没介绍的。最近开始玩服务器，了解到了有Windows与Linux之间共享文件的方法，就是samba。然后具体和apidoc结合起来非常好用，所以本文就当做笔记来把它记录下来了&lt;br&gt;
    
    </summary>
    
      <category term="API文档" scheme="https://sanit1.github.io/categories/API%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="apidoc" scheme="https://sanit1.github.io/tags/apidoc/"/>
    
      <category term="samba" scheme="https://sanit1.github.io/tags/samba/"/>
    
  </entry>
  
</feed>
